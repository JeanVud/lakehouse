# nginx/nginx.conf
worker_processes auto; # Adjust based on your CPU cores

events {
    worker_connections 1024; # Adjust as needed
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Log formats (optional, but good for debugging)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn; # Change to debug for more verbosity if needed

    # --- ADD THESE TWO LINES FOR DYNAMIC DNS RESOLUTION IN DOCKER COMPOSE ---
    resolver 127.0.0.11 valid=30s; # Docker's internal DNS server
    set $telegram_bot_host telegram-bot; # Dynamic resolution of the service name
    # -----------------------------------------------------------------------


    # HTTP Server: Redirect all HTTP traffic to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name quynhgiang.info; # <--- IMPORTANT: Replace with your actual domain

        return 301 https://$host$request_uri; # Permanent redirect to HTTPS
    }

    # HTTPS Server: Serve your FastAPI app over SSL
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name quynhgiang.info; # <--- IMPORTANT: Replace with your actual domain

        # SSL Certificate Paths - These paths are INSIDE the Nginx container
        # They correspond to the volume mounts in your docker-compose.yaml
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        # Standard SSL configurations (Certbot typically adds more, but this is a good base)
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        # Strong ciphers to protect against vulnerabilities
        ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
        ssl_prefer_server_ciphers on;

        # Proxy requests to the telegram-bot service
        # 'telegram-bot' is the service name defined in docker-compose.yaml
        # '8000' is the internal port your FastAPI app listens on inside its container
        location / {
            proxy_pass http://telegram-bot:8000;
            
            # Pass original host, client IP, and protocol headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # Tells FastAPI it was HTTPS
            
            # Optional: For WebSockets if your FastAPI app uses them
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}